#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6
#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp AT>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };

        quotation {
            bindings = <&kp AMPERSAND>;
            key-positions = <19 20>;
        };

        d {
            bindings = <&kp A>;
            key-positions = <20 18 19 8 9 7>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    behaviors {
        encoder_msc_down_up: encoder_msc_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_DOWN_UP";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                          &kp T                                                        &kp Y        &kp U  &lt 5 I    &lt 5 O  &kp P
&kp A             &kp S         &kp D         &kp F                          &kp G        &kp LS(LG(S))                    &kp MINUS      &kp H        &kp J  &kp K      &kp L    &kp LEFT_BRACKET
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V                          &kp B        &kp LC(C)                        &kp B          &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 3 INT_MUHENKAN  &lt 2 SPACE  &lt_to_layer_0 3 INT_HENKAN      &kp BACKSPACE  &lt 1 ENTER                             &kp DEL
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        FUNCTION {
            bindings = <
&kp ESCAPE  &kp F1  &kp F2  &kp F3  &kp F10                      &bt BT_SEL 0       &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans      &kp F4  &kp F5  &kp F6  &kp F11  &trans      &trans  &kp C_VOLUME_DOWN  &kp C_MUTE    &kp C_VOL_UP  &trans        &trans
&trans      &kp F7  &kp F8  &kp F9  &kp F12  &trans      &trans  &trans             &trans        &trans        &trans        &trans
&trans      &trans  &trans  &trans  &trans   &trans      &trans  &trans                                                       &trans
            >;
        };

        NUM {
            bindings = <
&kp MINUS                   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp LS(SEMICOLON)                                                        &kp EXCLAMATION  &kp HASH               &kp LS(EQUAL)      &kp SQT            &kp SEMICOLON
&kp SLASH                   &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp LS(SQT)        &kp LC(LA(KP_NUMBER_0))      &kp LS(INTERNATIONAL_1)  &kp EQUAL        &kp CARET              &kp DOLLAR         &kp PERCENT        &kp INTERNATIONAL_3
&mt LEFT_SHIFT KP_NUMBER_0  &kp N7        &kp N8        &kp N9        &kp PERIOD         &kp LS(MINUS)                &kp LS(N8)               &kp LS(N9)       &kp LS(RIGHT_BRACKET)  &kp LS(BACKSLASH)  &kp RIGHT_BRACKET  &kp BACKSLASH
&trans                      &trans        &kp N0        &trans        &trans             &trans                       &trans                   &trans                                                                        &kp LS(INT_YEN)
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &trans                  &kp UP_ARROW    &kp LC(TAB)      &trans                      &trans  &trans  &trans  &trans  &trans
&trans          &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &trans           &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans           &trans  &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &kp LA(LEFT_ARROW)  &kp LA(RIGHT_ARROW)
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2            &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans              &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                          &trans
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp 0 0>;
        };

        keyboard {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                        &kp T                                                          &kp Y        &kp U  &lt 5 I    &kp O    &kp P
&kp A             &kp S         &kp D         &kp F                        &kp G        &kp LS(LG(S))                      &kp MINUS      &kp H        &kp J  &kp K      &kp L    &kp SQT
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V                        &kp B        &kp COLON                          &kp SEMICOLON  &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 0 INT_HENKAN  &lt 2 SPACE  &lt_to_layer_0 0 INT_MUHENKAN      &kp BACKSPACE  &lt 1 ENTER                             &kp DEL
            >;

            sensor-bindings = <&encoder_msc_down_up>;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
